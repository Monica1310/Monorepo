----Monorepo-----
A monorepo is a single repository containing multiple distinct projects,
with well-defined relationships.

Monorepo-style development is a software development approach where:

You develop multiple projects in the same repository.
The projects can depend on each other, so they can share code.
When you make a change, you do not rebuild or retest every project in the monorepo. 
Instead, you only rebuild and retest the projects that can be affected by your change.

-----Lerna-------

Lerna is a tool for managing JavaScript projects with multiple packages. 
Lerna manages monorepos, which can hold projects containing multiple packages within itself
Lerna provides features such as package bootstrapping, parallelized builds, and artifactory
publication, which can aid you when managing monorepos. Lerna is beneficial for projects 
that share common dependencies.

Lerna
Lerna is a tool used to manage monorepos. The repositories are structured into sub repositories. 
It is typically used in large codebases for shared dependency management and code deployment.
Lerna has two major features, namely bootstrap and publish.

--lerna bootstrap--
This is a command provided by Lerna that does the following:

>It installs the dependencies of all the packages within the monorepo.
>It creates links between shared dependencies so that the same package is not installed twice.

-What does Lerna bootstrap do?

Lerna's bootstrap command installs package dependencies and links the packages together. Without 
bootstrapping your packages, the package dependencies will not satisfy, and you won't be able to run 
any npm scripts across the project

--lerna publish--
The publish command publishes the package updated since the last version release.

-----Yarn workspaces-------
Yarn workspaces are used to optimize dependency management. When we use yarn workspaces, 
all project dependencies are installed in one go. Tools like Lerna make use of Yarn workspaces' low-level primitives.

Using Yarn Workspaces
Let us assume that we have two repositories, namely packages/repo-a and packages/repo-b, 
within our monorepo structure. To use workspaces, add the following to the package.json file of the root repository.

{
  "private": true,
  "workspaces": ["packages/*"]
}
This adds all the folders within packages as a Yarn workspace. Now, if we run yarn install,
 dependencies of both repo-a and repo-b are installed.

Setting up Your Project
We will be using yarn as a package manager. To set up Yarn in your machine, install it from the official yarn website.

Let us create a package.json for our project:

{
  "name": "monorepo",
  "version": "1.0.0",
  "private": true,
  "workspaces": ["packages/*"]
}
The workspaces option is used to specify which subfolder contains the various packages in our monorepo. 
Each folder within packages will be considered a separate project.


---micro-frontend and module federation-----

-----pnpm----npm----yarn



----mono-repo-----

npm i -g yarn
npm i lerna bootstrap
npm i lerna
yarn lerna init
add scripts
"bootstrap": "yarn install; lerna bootstrap;",
"start": "lerna run start --parallel",
"dev": "lerna run dev --parallel"


package folder ->
--install the application---
>create next.js application
--specify the port to run different application---
>-- -p 3000 >port to run the application

--install module federation---
>npm install @module-federation/nextjs-mf


---error---

1.error Workspaces can only be enabled in private projects

Screenshot (13).png


---in package.josn---
> "private": true,

2.Server Error
TypeError: __webpack_modules__[moduleId] is not a function


change import to dynamic import


3."Cannot find module './components/Navigation' or its corresponding type declarations



warning package-lock.json found. Your project contains lock files generated by tools other 
than Yarn. It is advised not to mix package
managers in order to avoid resolution inconsistencies caused by unsynchronized lock files. 
To clear this warning, remove package-lock.json.